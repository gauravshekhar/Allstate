// Generated by CoffeeScript 1.6.2
(function() {
  var JadeCompiler, jade, sysPath,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jade = require('jade');

  sysPath = require('path');

  module.exports = JadeCompiler = (function() {
    JadeCompiler.prototype.brunchPlugin = true;

    JadeCompiler.prototype.type = 'template';

    JadeCompiler.prototype.extension = 'jade';

    JadeCompiler.prototype._dependencyRegExp = /^ *(?:include|extends) (.*)/;

    function JadeCompiler(config) {
      this.config = config;
      this.getDependencies = __bind(this.getDependencies, this);
      return;
    }

    JadeCompiler.prototype.compile = function(data, path, callback) {
      var content, err, error, result, _ref, _ref1;

      try {
        content = jade.compile(data, {
          compileDebug: false,
          client: true,
          filename: path,
          pretty: !!((_ref = this.config.plugins) != null ? (_ref1 = _ref.jade) != null ? _ref1.pretty : void 0 : void 0)
        });
        return result = "module.exports = " + content + ";";
      } catch (_error) {
        err = _error;
        return error = err;
      } finally {
        callback(error, result);
      }
    };

    JadeCompiler.prototype.include = [sysPath.join(__dirname, '..', 'vendor', 'runtime.js')];

    JadeCompiler.prototype.getDependencies = function(data, path, callback) {
      var dependencies, parent,
        _this = this;

      parent = sysPath.dirname(path);
      dependencies = data.split('\n').map(function(line) {
        return line.match(_this._dependencyRegExp);
      }).filter(function(match) {
        return (match != null ? match.length : void 0) > 0;
      }).map(function(match) {
        return match[1];
      }).filter(function(path) {
        return !!path;
      }).map(function(path) {
        if (sysPath.extname(path) !== ("." + _this.extension)) {
          return path + ("." + _this.extension);
        } else {
          return path;
        }
      }).map(function(path) {
        if (path.charAt(0) === '/') {
          return sysPath.join(_this.config.paths.root, path.slice(1));
        } else {
          return sysPath.join(parent, path);
        }
      });
      return process.nextTick(function() {
        return callback(null, dependencies);
      });
    };

    return JadeCompiler;

  })();

}).call(this);
